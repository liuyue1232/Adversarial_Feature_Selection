include:
  - template: 'Workflows/Branch-Pipelines.gitlab-ci.yml'
  - template: 'Jobs/Code-Quality.gitlab-ci.yml'
  - template: 'Security/SAST.gitlab-ci.yml'
  - template: 'Security/Secret-Detection.gitlab-ci.yml'

variables:
  SEARCH_MAX_DEPTH: 6
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PIP_FIND_LINKS_TORCH: "https://download.pytorch.org/whl/cpu/torch_stable.html"
  TORCH_HOME: "$CI_PROJECT_DIR/.cache/torch"
  SECML_HOME_DIR: "$CI_PROJECT_DIR/secml-data"
  TOX_WORKDIR: "$CI_PROJECT_DIR/.tox"
  TOX_TESTENV_PASSENV: "PIP_CACHE_DIR PIP_FIND_LINKS_TORCH TORCH_HOME SECML_HOME_DIR"
  TOX_USEDEVELOP: "False"

stages:
  - package
  - test
  - sync
  - release
  - triage


.shared_windows_runners:
  tags:
  - shared-windows
  - windows
  - windows-1809


.test-cache:
  cache: &test-cache
    paths:
      - $PIP_CACHE_DIR
      - $TORCH_HOME
      - $SECML_HOME_DIR


.package:
  stage: package
  interruptible: true

package:
  extends: .package
  image: ${CI_REGISTRY}/pralab/docker-helper-images/python36-setuptools:latest
  before_script:
    - echo $CI_PROJECT_DIR
  script:
    - python setup.py sdist --formats=zip
    - python setup.py bdist_wheel --universal
    - twine check dist/*
  rules:
    - if: '$RUN_TESTS'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - changes:
      - src/secml/**/*
      - .gitlab-ci.yml
      - CHANGELOG.md
      - MANIFEST.in
      - README.md
      - requirements.txt
      - setup.py
      - tox.ini
      when: on_success
  artifacts:
    name: "${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}"
    paths:
      - ${CI_PROJECT_DIR}/dist/${CI_PROJECT_NAME}-*.zip
      - ${CI_PROJECT_DIR}/dist/${CI_PROJECT_NAME}-*.whl
    expire_in: 1 week

package:docs:
  extends: .package
  image: ${CI_REGISTRY}/pralab/docker-helper-images/python36-sphinx:latest
  script:
    - echo $CI_PROJECT_DIR
    - python -V
    - pip install tox
    - tox -e docs
    - mv docs/build/html/ public/
  rules:
    - if: '$RUN_TESTS'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - changes:
      - docs/**/*
      - tutorials/**/*
      - src/secml/**/*
      - .gitlab-ci.yml
      - CHANGELOG.md
      - README.md
      - requirements.txt
      - setup.py
      - tox.ini
      when: on_success
  artifacts:
    name: "${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_DOCS"
    paths:
      - public
    expire_in: 1 day
  cache:
    key: "test-cache-py36"
    paths:
      - "$CI_PROJECT_DIR/.cache/pip"
      - "$CI_PROJECT_DIR/secml-data"
    policy: pull


code_quality:
  interruptible: true  
  rules:
    - if: '$CODE_QUALITY_DISABLED'
      when: never
    - if: '$CI_COMMIT_BRANCH == "stable" || $CI_COMMIT_BRANCH =~ /^release-.*$/ || $CI_COMMIT_BRANCH =~ /^.*-stable$/'
      when: never
    - if: '$CI_COMMIT_BRANCH'
  variables:
    REPORT_FORMAT: html
  artifacts:
    paths: [gl-code-quality-report.html]


.test:
  stage: test
  needs: ["package"]
  interruptible: true
  before_script:
    - echo $CI_PROJECT_DIR
    - python -V
    - pip install tox
  rules:
    - if: '$RUN_TESTS'
      when: on_success
    - if: '$SKIP_TESTS'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "tags"'
      when: never
    - changes:
      - src/secml/VERSION
      when: never
    - changes:
      - src/secml/**/*
      - .gitlab-ci.yml
      - requirements.txt
      - setup.py
      - tox.ini
      when: on_success

.test-report:
  artifacts: &pytest-report
    reports:
      junit: pytest-report.xml
    expire_in: 1 week

test:py36:latest:
  extends: .test
  image: python:3.6
  script: tox -e py36
  cache: &test-cache-py36
    key: "test-cache-py36"
    <<: *test-cache
  artifacts: *pytest-report

test:py36:min:
  extends: .test
  image: python:3.6
  script: tox -e py36-min
  cache: &test-cache-py36-min
    key: "test-cache-py36-min"
    <<: *test-cache
  artifacts: *pytest-report

test:py37:latest:
  extends: .test
  image: python:3.7
  script: tox -e py37
  cache: &test-cache-py37
    key: "test-cache-py37"
    <<: *test-cache
  artifacts: *pytest-report

test:py37:min:
  extends: .test
  image: python:3.7
  script: tox -e py37-min
  cache: &test-cache-py37-min
    key: "test-cache-py37-min"
    <<: *test-cache
  artifacts: *pytest-report

test:py38:latest:
  extends: .test
  image: python:3.8
  script: tox -e py38
  cache: &test-cache-py38
    key: "test-cache-py38"
    <<: *test-cache
  artifacts: *pytest-report

test:py38:min:
  extends: .test
  image: python:3.8
  script: tox -e py38-min
  cache: &test-cache-py38-min
    key: "test-cache-py38-min"
    <<: *test-cache
  artifacts: *pytest-report

test:py36:latest:win:
  extends:
    - .test
    - .shared_windows_runners
  image: python:3.6
  rules:
    - if: '$CI_SERVER_HOST != "gitlab.com"'
      when: never
    - if: '$RUN_TESTS'
      when: on_success
    - if: '$SKIP_TESTS'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "tags"'
      when: never
    - changes:
      - src/secml/VERSION
      when: never
    - changes:
      - src/secml/**/*
      - .gitlab-ci.yml
      - requirements.txt
      - setup.py
      - tox.ini
      when: on_success
  before_script:
    - echo $CI_PROJECT_DIR
    - choco install vcredist2017 -y
    - choco install python -y --version=3.6.8
    # Path is not updated by default by choco
    - $env:Path += ";C:\Python36;C:\Python36\Scripts"
    - python -V
    # If matplotlib cannot find the following registry item tries to read the "WINDIR" env key (caps) and crashes
    - New-ItemProperty -Path "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders" -Name "Fonts" -Value "C:\Windows\Fonts" -PropertyType "String"
    # The https://download.pytorch.org/ certificates chain is not recognized by default as trusted
    - Import-Certificate -FilePath ".gitlab\dl-pytorch-chain.p7b" -CertStoreLocation Cert:\LocalMachine\Root
    - pip install tox
  script: tox -e py36-win
  allow_failure: true
  cache: &test-cache-py36-win
    key: "test-cache-py36-win"
    <<: *test-cache
  artifacts: *pytest-report

test:py36:latest:noextras:
  extends: .test
  image: python:3.6
  script: tox -e py36-nopytorch-nocleverhans-nofoolbox
  cache: *test-cache-py36
  artifacts: *pytest-report


.test:notebooks:
  extends: .test
  needs: []
  rules:
    - if: '$RUN_TESTS'
      when: on_success
    - if: '$SKIP_TESTS'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "tags"'
      when: never
    - changes:
      - src/secml/VERSION
      when: never
    - changes:
      - src/secml/**/*
      - tutorials/**/*
      - .gitlab-ci.yml
      - requirements.txt
      - setup.py
      - tox.ini
      when: on_success

test:notebooks:py36:latest:
  extends: .test:notebooks
  image: python:3.6
  script: tox -e latest-notebooks
  cache: *test-cache-py36


test:zoo:
  stage: test
  needs: ["package"]
  allow_failure: true
  variables:
    SECML_ZOO_BRANCH: master
    PIP_CACHE_DIR: $PIP_CACHE_DIR
    TORCH_HOME: $TORCH_HOME
    SECML_HOME_DIR: $SECML_HOME_DIR
  trigger:
    project: secml/secml-zoo
    branch: $SECML_ZOO_BRANCH
    strategy: depend
  rules:
    - if: '$CI_SERVER_HOST != "gitlab.com"'
      when: never
    - if: '$RUN_TESTS'
      when: on_success
    - if: '$SKIP_TESTS'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "tags"'
      when: never
    - changes:
      - src/secml/VERSION
      when: never
    - changes:
      - src/secml/**/*
      - .gitlab-ci.yml
      - requirements.txt
      - setup.py
      - tox.ini
      when: on_success


.test:install:
  stage: test
  needs: ["package"]
  interruptible: true
  before_script:
    - echo $CI_PROJECT_DIR
    - python -V
  after_script:
    - python -c "import secml"
  rules:
    - if: '$RUN_TESTS'
      when: on_success
    - if: '$SKIP_TESTS'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "tags" || $CI_PIPELINE_SOURCE == "web"'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "stable" || $CI_COMMIT_BRANCH =~ /^release-.*$/ || $CI_COMMIT_BRANCH =~ /^.*-stable$/'
      changes:
      - src/secml/**/*
      - .gitlab-ci.yml
      - CHANGELOG.md
      - MANIFEST.in
      - README.md
      - requirements.txt
      - setup.py
      - tox.ini
      when: on_success

.test:install:whl:
  extends: .test:install
  script:
    - DIST_WHL=$(find $CI_PROJECT_DIR/dist -iname \*.whl -exec basename {} \;)
    - echo $DIST_WHL
    - pip install ${CI_PROJECT_DIR}/dist/${DIST_WHL}

.test:install:whl:extras:
  extends: .test:install:whl
  variables:
    PIP_FIND_LINKS: $PIP_FIND_LINKS_TORCH
  script:
    - DIST_WHL=$(find $CI_PROJECT_DIR/dist -iname \*.whl -exec basename {} \;)
    - echo $DIST_WHL
    - pip install ${CI_PROJECT_DIR}/dist/${DIST_WHL}[pytorch,cleverhans,foolbox]
  after_script:
    - python -c "import secml"
    - python -c "from secml.ml.classifiers import CClassifierPyTorch"
    - python -c "from secml.adv.attacks.evasion import CAttackEvasionCleverhans"
    - python -c "from secml.adv.attacks.evasion import CAttackEvasionFoolbox"

test:install:whl:py36:
  extends: .test:install:whl
  image: python:3.6
  cache:
    <<: *test-cache-py36
    policy: pull

test:install:whl:py37:
  extends: .test:install:whl
  image: python:3.7
  cache:
    <<: *test-cache-py37
    policy: pull

test:install:whl:py38:
  extends: .test:install:whl
  image: python:3.8
  cache:
    <<: *test-cache-py38
    policy: pull

test:install:whl:extras:py36:
  extends: .test:install:whl:extras
  image: python:3.6
  cache:
    <<: *test-cache-py36
    policy: pull

test:install:whl:extras:py37:
  extends: .test:install:whl:extras
  image: python:3.7
  cache:
    <<: *test-cache-py37
    policy: pull

test:install:whl:extras:py38:
  extends: .test:install:whl:extras
  image: python:3.8
  script:
    - DIST_WHL=$(find $CI_PROJECT_DIR/dist -iname \*.whl -exec basename {} \;)
    - echo $DIST_WHL
    - pip install ${CI_PROJECT_DIR}/dist/${DIST_WHL}[pytorch,foolbox]
  after_script:
    - python -c "import secml"
    - python -c "from secml.ml.classifiers import CClassifierPyTorch"
    - python -c "from secml.adv.attacks.evasion import CAttackEvasionFoolbox"
  cache:
    <<: *test-cache-py38
    policy: pull


.upstream-ssh:
  before_script: &upstream-ssh
    # Activate the ssh agent
    - eval $(ssh-agent -s)

    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - echo "$SSH_UPSTREAM_KEY" | tr -d '\r' | ssh-add -

    # Create .ssh folder and set correct permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    # Set user/email to use git commands
    - git config --global user.email "$GITLAB_USER_EMAIL"
    - git config --global user.name "$GITLAB_USER_NAME"

    # Add known hosts validation keys
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts


.sync:
  stage: sync
  image: ${CI_REGISTRY}/pralab/docker-helper-images/alpine-release:latest
  dependencies: []  # We do not need artifacts for jobs in this stage

sync:upstream-repo:
  extends: .sync
  before_script: *upstream-ssh
  variables:
    CI_UPSTREAM_REPO: secml/secml.git
    CI_UPSTREAM_BRANCH: master
  script:
    # Validate access to ssh
    - ssh -T git@gitlab.com
    # Add upstream repository as new remote (workaround for fatal: remote upstream already exists.)
    - git config remote.upstream.url >&- || git remote add upstream git@gitlab.com:$CI_UPSTREAM_REPO
    # Fetch remote, merge local and push to upstream
    - git fetch upstream $CI_UPSTREAM_BRANCH
    # Checkout current HEAD as branch (delete branch first if exists))
    - git branch -D $CI_COMMIT_BRANCH &>/dev/null || true
    - git checkout -b $CI_COMMIT_BRANCH
    # Checkout the upstream branch using unique name (delete branch first if exists)
    - git branch -D up-$CI_UPSTREAM_BRANCH &>/dev/null || true
    - git checkout -b up-$CI_UPSTREAM_BRANCH upstream/$CI_UPSTREAM_BRANCH
    # Merge local branch into upstream (here any conflict will make the job fail)
    - git merge $CI_COMMIT_BRANCH --no-edit
    # Push to upstream
    - git push upstream up-$CI_UPSTREAM_BRANCH:$CI_UPSTREAM_BRANCH
  rules:
    - if: '$RUN_SYNC'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: on_success
  allow_failure: true


.release:
  stage: release
  image: ${CI_REGISTRY}/pralab/docker-helper-images/alpine-release:latest
  only:
    - tags
  when: manual

release:gitlab-releases:
  extends: .release
  before_script:
    - apk add unzip
    - echo $CI_PROJECT_ID
    - echo $CI_COMMIT_TAG
  script:
    - DIST_ZIP=$(find $CI_PROJECT_DIR/dist -iname \*.zip -exec basename {} \;)
    - echo $DIST_ZIP
    - 'curl -s --request POST --header "PRIVATE-TOKEN: $API_ACCESS_TOKEN" --data name="$DIST_ZIP" --data url="$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_TAG/raw/dist/$DIST_ZIP?job=release:gitlab-releases" --data link_type="package" $CI_PROJECT_DOMAIN/api/v4/projects/$CI_PROJECT_ID/releases/$CI_COMMIT_TAG/assets/links'
    - DIST_WHL=$(find $CI_PROJECT_DIR/dist -iname \*.whl -exec basename {} \;)
    - echo $DIST_WHL
    - 'curl -s --request POST --header "PRIVATE-TOKEN: $API_ACCESS_TOKEN" --data name="$DIST_WHL" --data url="$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_TAG/raw/dist/$DIST_WHL?job=release:gitlab-releases" --data link_type="package" $CI_PROJECT_DOMAIN/api/v4/projects/$CI_PROJECT_ID/releases/$CI_COMMIT_TAG/assets/links'
  artifacts:  # Keep the distribution package (default expire 0)
    name: "${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}"
    paths:
      - ${CI_PROJECT_DIR}/dist/${CI_PROJECT_NAME}-*.zip
      - ${CI_PROJECT_DIR}/dist/${CI_PROJECT_NAME}-*.whl
    expire_in: never

release:gitlab-repo:
  extends: .release
  before_script: *upstream-ssh
  variables:
    CI_UPSTREAM_REPO: secml/secml.git
  dependencies: []  # We do not need artifacts in this job
  script:
    # Validate access to ssh
    - ssh -T git@gitlab.com
    # Use main TAG version (excluding e.g. "-rc1" suffix)
    - CI_UPSTREAM_BRANCH=release-$(echo $CI_COMMIT_TAG | ( IFS="-$IFS" ; read a b && echo $a ))
    # Clone gitlab.com repository
    - git clone -b $CI_UPSTREAM_BRANCH git@gitlab.com:$CI_UPSTREAM_REPO gitlab-secml
    # Remove all files in target repository (excluding .git folder)
    - find gitlab-secml -mindepth 1 -maxdepth 1 -not -name .git -exec rm -rv {} +
    # Copy al files in target repository (excluding .git folder and target repo folder)
    - find . -mindepth 1 -maxdepth 1 -not -name .git -not -name gitlab-secml -exec cp -r {} gitlab-secml/ \;
    # Commit and push
    - cd gitlab-secml
    - git add .  # .gitignore will properly exclude what should be excluded
    - git commit -m "Release $CI_COMMIT_TAG"
    - git push

release:gitlab-pages:
  extends: .release
  before_script: *upstream-ssh
  variables:
    CI_PAGES_REPO: secml/secml.gitlab.io.git
    CI_PAGES_URL: secml.gitlab.io
    CI_PAGES_BRANCH: master
  script:
    # Validate access to ssh
    - ssh -T git@gitlab.com
    # Clone gitlab.com-pages repository
    - git clone -b $CI_PAGES_BRANCH git@gitlab.com:$CI_PAGES_REPO
    - cd $CI_PAGES_URL
    # Remove current release
    - rm -r src/*
    # Copy generated release (from `package:docs`)
    - cp -r ../public/* src/
    # Commit and push
    - git add src/*
    - git commit -m "Release $CI_COMMIT_TAG"
    - git push

release:zoo:
  stage: release
  variables:
    RELEASE: $CI_COMMIT_TAG
    PIP_CACHE_DIR: $PIP_CACHE_DIR
    TORCH_HOME: $TORCH_HOME
    SECML_HOME_DIR: $SECML_HOME_DIR
  trigger:
    project: secml/secml-zoo
    strategy: depend
  rules:
    - if: '$CI_SERVER_HOST != "gitlab.com"'
      when: never
    - if: $CI_COMMIT_TAG
      when: manual

release:pypi:
  extends: .release
  image: ${CI_REGISTRY}/pralab/docker-helper-images/python36-setuptools:latest
  variables:
    TWINE_REPOSITORY_URL: "https://upload.pypi.org/legacy/"
    TWINE_USERNAME: __token__
  script:
    - twine upload $CI_PROJECT_DIR/dist/*

release:pypi:dry:
  extends: release:pypi
  variables:
    TWINE_REPOSITORY_URL: "https://test.pypi.org/legacy/"
    TWINE_USERNAME: __token__
  script:
    - twine upload -p $TWINE_PASSWORD_TEST $CI_PROJECT_DIR/dist/*
  only:
    - tags
    - web


.triage:
  image: ruby:latest
  needs: []
  cache: {}
  allow_failure: true
  before_script:
    - gem install gitlab-triage
    - export SSL_CERT_FILE=$CI_SERVER_TLS_CA_FILE

triage:run:
  stage: triage
  extends: .triage
  script:
    - gitlab-triage -r $CI_PROJECT_DIR/.gitlab/triage_extra.rb --debug --host-url $CI_PROJECT_DOMAIN --token $API_ACCESS_TOKEN --source-id $CI_PROJECT_PATH --policies-file $CI_PROJECT_DIR/.gitlab/triage-policies.yml
  rules:
    - if: '$RUN_TRIAGE'
      when: always

triage:run:dry:
  stage: triage
  extends: .triage
  script:
    - gitlab-triage -r $CI_PROJECT_DIR/.gitlab/triage_extra.rb --dry-run --debug --host-url $CI_PROJECT_DOMAIN --token $API_ACCESS_TOKEN --source-id $CI_PROJECT_PATH --policies-file $CI_PROJECT_DIR/.gitlab/triage-policies.yml
  only:
    - web
  when: manual
